Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID ASSIGN expression
Rule 2     expression -> expression PLUS term
Rule 3     expression -> expression MINUS term
Rule 4     expression -> term
Rule 5     term -> term TIMES factor
Rule 6     term -> term DIVIDE factor
Rule 7     term -> factor
Rule 8     factor -> NUM
Rule 9     factor -> ID

Terminals, with rules where they appear

ASSIGN               : 1
DIVIDE               : 6
ID                   : 1 9
MINUS                : 3
NUM                  : 8
PLUS                 : 2
TIMES                : 5
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3
factor               : 5 6 7
statement            : 0
term                 : 2 3 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID ASSIGN expression

    ID              shift and go to state 2

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 3


state 3

    (1) statement -> ID ASSIGN . expression
    (2) expression -> . expression PLUS term
    (3) expression -> . expression MINUS term
    (4) expression -> . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (8) factor -> . NUM
    (9) factor -> . ID

    NUM             shift and go to state 8
    ID              shift and go to state 4

    expression                     shift and go to state 5
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 4

    (9) factor -> ID .

    TIMES           reduce using rule 9 (factor -> ID .)
    DIVIDE          reduce using rule 9 (factor -> ID .)
    PLUS            reduce using rule 9 (factor -> ID .)
    MINUS           reduce using rule 9 (factor -> ID .)
    $end            reduce using rule 9 (factor -> ID .)


state 5

    (1) statement -> ID ASSIGN expression .
    (2) expression -> expression . PLUS term
    (3) expression -> expression . MINUS term

    $end            reduce using rule 1 (statement -> ID ASSIGN expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10


state 6

    (4) expression -> term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expression -> term .)
    MINUS           reduce using rule 4 (expression -> term .)
    $end            reduce using rule 4 (expression -> term .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 7

    (7) term -> factor .

    TIMES           reduce using rule 7 (term -> factor .)
    DIVIDE          reduce using rule 7 (term -> factor .)
    PLUS            reduce using rule 7 (term -> factor .)
    MINUS           reduce using rule 7 (term -> factor .)
    $end            reduce using rule 7 (term -> factor .)


state 8

    (8) factor -> NUM .

    TIMES           reduce using rule 8 (factor -> NUM .)
    DIVIDE          reduce using rule 8 (factor -> NUM .)
    PLUS            reduce using rule 8 (factor -> NUM .)
    MINUS           reduce using rule 8 (factor -> NUM .)
    $end            reduce using rule 8 (factor -> NUM .)


state 9

    (2) expression -> expression PLUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (8) factor -> . NUM
    (9) factor -> . ID

    NUM             shift and go to state 8
    ID              shift and go to state 4

    term                           shift and go to state 13
    factor                         shift and go to state 7

state 10

    (3) expression -> expression MINUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (8) factor -> . NUM
    (9) factor -> . ID

    NUM             shift and go to state 8
    ID              shift and go to state 4

    term                           shift and go to state 14
    factor                         shift and go to state 7

state 11

    (5) term -> term TIMES . factor
    (8) factor -> . NUM
    (9) factor -> . ID

    NUM             shift and go to state 8
    ID              shift and go to state 4

    factor                         shift and go to state 15

state 12

    (6) term -> term DIVIDE . factor
    (8) factor -> . NUM
    (9) factor -> . ID

    NUM             shift and go to state 8
    ID              shift and go to state 4

    factor                         shift and go to state 16

state 13

    (2) expression -> expression PLUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression PLUS term .)
    MINUS           reduce using rule 2 (expression -> expression PLUS term .)
    $end            reduce using rule 2 (expression -> expression PLUS term .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 14

    (3) expression -> expression MINUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> expression MINUS term .)
    MINUS           reduce using rule 3 (expression -> expression MINUS term .)
    $end            reduce using rule 3 (expression -> expression MINUS term .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 15

    (5) term -> term TIMES factor .

    TIMES           reduce using rule 5 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 5 (term -> term TIMES factor .)
    PLUS            reduce using rule 5 (term -> term TIMES factor .)
    MINUS           reduce using rule 5 (term -> term TIMES factor .)
    $end            reduce using rule 5 (term -> term TIMES factor .)


state 16

    (6) term -> term DIVIDE factor .

    TIMES           reduce using rule 6 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 6 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 6 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 6 (term -> term DIVIDE factor .)
    $end            reduce using rule 6 (term -> term DIVIDE factor .)

